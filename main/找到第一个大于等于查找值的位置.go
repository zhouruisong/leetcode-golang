package main

import "fmt"

/*请实现有重复数字的升序数组的二分查找。
输出在数组中第一个大于等于查找值的位置，如果数组中不存在这样的数，则输出数组长度加一

示例1
输入
复制
5,4,[1,2,4,4,5]
返回值
复制
3
说明
输出位置从1开始计算

*/

/**
 * 二分查找
 * @param n int整型 数组长度
 * @param v int整型 查找值
 * @param a int整型一维数组 有序数组
 * @return int整型
 */
func upper_bound_(n int, v int, a []int) int {
	// write code here
	if a[n-1] < v {
		return n + 1
	}

	left := 0
	right := n - 1
	for left < right {
		mid := (left + right) >> 1
		if a[mid] >= v {
			right = mid
		} else {
			left = mid + 1
		}
	}
	return left + 1
}

func main() {
	//第一个比1大的数的位置是“2”的位置  此题从1 开始数位置  故为1
	fmt.Println(upper_bound_(100, 1, []int{2, 3, 4, 4, 4, 7, 7, 8, 10, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 23, 24, 24, 24, 24,
		25, 26, 26, 26, 27, 27, 28, 29, 29, 30, 33, 36, 38, 38, 40, 40, 41, 43, 43, 43, 44, 46, 46, 47, 51, 52, 52, 53, 54, 56, 57, 57, 57, 58, 58, 61,
		61, 61, 62, 64, 64, 66, 66, 67, 67, 67, 70, 72, 74, 74, 74, 75, 75, 78, 78, 78, 79, 79, 80, 83, 83, 83, 83, 84, 84, 86, 88, 89, 89, 90, 91, 91,
		92, 93, 93, 96}))
}
